services:
  web:
    image: ${REG_URL}/${PROJECT_NAME}:${TAG}
    working_dir: /var/www/html
    environment:
      - AUTORUN_ENABLED=true
      - PHP_OPCACHE_ENABLE=1
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/up" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - app
      - traefik_proxy
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      labels:
        - traefik.enable=true
        - traefik.http.routers.${STACK_NAME}.rule=${TRAEFIK_WEB_HOST_RULE}
        - traefik.http.routers.${STACK_NAME}.entrypoints=web
        - traefik.swarm.network=traefik_proxy
        - traefik.http.services.${STACK_NAME}.loadbalancer.server.port=8080
        - traefik.http.services.${STACK_NAME}.loadbalancer.passhostheader=true
        - traefik.http.middlewares.secure-headers.headers.sslHost=${TRAEFIK_HOST_RULE}
        - traefik.http.middlewares.secure-headers.headers.sslForceHost=true
        - traefik.http.middlewares.secure-headers.headers.sslProxyHeaders.X-Forwarded-Proto=https
        - traefik.http.routers.${STACK_NAME}.middlewares=secure-headers
    volumes:
      - web_storage:/var/www/html/storage/app
      - web_logs:/var/www/html/storage/logs
      - ${DEPLOYMENT_PATH}/.env:/var/www/html/.env:ro
    depends_on:
      - postgres
      - redis

  postgres:
    image: timescale/timescaledb:2.20.3-pg17
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    networks:
      - app

  redis:
    image: redis:7-alpine
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - redis_data:/data
    networks:
      - app

  meilisearch:
    image: getmeili/meilisearch:v1.14.0
    environment:
      MEILI_NO_ANALYTICS: '${MEILISEARCH_NO_ANALYTICS:-false}'
      MEILI_MASTER_KEY: '${MEILISEARCH_KEY}'
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--spider", "http://127.0.0.1:7700/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - meilisearch_data:/meili_data
    networks:
      - app

volumes:
  web_storage:
  web_logs:
  postgres_data:
  redis_data:
  meilisearch_data:

networks:
  app:
    driver: overlay
  traefik_proxy:
    external: true
